package com.buddle.web3.config;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class MyNFTs extends Contract {
    public static final String BINARY = "0x608060405234801562000010575f80fd5b506040518060400160405280600681526020017f4d794e46547300000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4d4e465400000000000000000000000000000000000000000000000000000000815250815f90816200008d9190620003f6565b5080600190816200009f9190620003f6565b505050620000c2620000b6620000c860201b60201c565b620000cf60201b60201c565b620004da565b5f33905090565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200020e57607f821691505b602082108103620002245762000223620001c9565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620002887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200024b565b6200029486836200024b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620002de620002d8620002d284620002ac565b620002b5565b620002ac565b9050919050565b5f819050919050565b620002f983620002be565b620003116200030882620002e5565b84845462000257565b825550505050565b5f90565b6200032762000319565b62000334818484620002ee565b505050565b5b818110156200035b576200034f5f826200031d565b6001810190506200033a565b5050565b601f821115620003aa5762000374816200022a565b6200037f846200023c565b810160208510156200038f578190505b620003a76200039e856200023c565b83018262000339565b50505b505050565b5f82821c905092915050565b5f620003cc5f1984600802620003af565b1980831691505092915050565b5f620003e68383620003bb565b9150826002028217905092915050565b620004018262000192565b67ffffffffffffffff8111156200041d576200041c6200019c565b5b620004298254620001f6565b620004368282856200035f565b5f60209050601f8311600181146200046c575f841562000457578287015190505b620004638582620003d9565b865550620004d2565b601f1984166200047c866200022a565b5f5b82811015620004a5578489015182556001820191506020850194506020810190506200047e565b86831015620004c55784890151620004c1601f891682620003bb565b8355505b6001600288020188555050505b505050505050565b612d3b80620004e85f395ff3fe608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063715018a6116100a0578063b88d4fde1161006f578063b88d4fde146102a1578063c87b56dd146102bd578063e985e9c5146102ed578063f2fde38b1461031d578063fb37e8831461033957610109565b8063715018a61461023f5780638da5cb5b1461024957806395d89b4114610267578063a22cb4651461028557610109565b806323b872dd116100dc57806323b872dd146101a757806342842e0e146101c35780636352211e146101df57806370a082311461020f57610109565b806301ffc9a71461010d57806306fdde031461013d578063081812fc1461015b578063095ea7b31461018b575b5f80fd5b61012760048036038101906101229190611bd1565b610369565b6040516101349190611c16565b60405180910390f35b6101456103c9565b6040516101529190611cb9565b60405180910390f35b61017560048036038101906101709190611d0c565b610458565b6040516101829190611d76565b60405180910390f35b6101a560048036038101906101a09190611db9565b61049a565b005b6101c160048036038101906101bc9190611df7565b6105b0565b005b6101dd60048036038101906101d89190611df7565b610610565b005b6101f960048036038101906101f49190611d0c565b61062f565b6040516102069190611d76565b60405180910390f35b61022960048036038101906102249190611e47565b6106b3565b6040516102369190611e81565b60405180910390f35b610247610767565b005b61025161077a565b60405161025e9190611d76565b60405180910390f35b61026f6107a2565b60405161027c9190611cb9565b60405180910390f35b61029f600480360381019061029a9190611ec4565b610832565b005b6102bb60048036038101906102b6919061202e565b610848565b005b6102d760048036038101906102d29190611d0c565b6108aa565b6040516102e49190611cb9565b60405180910390f35b610307600480360381019061030291906120ae565b6109b4565b6040516103149190611c16565b60405180910390f35b61033760048036038101906103329190611e47565b610a42565b005b610353600480360381019061034e919061218a565b610ac4565b6040516103609190611e81565b60405180910390f35b5f634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103c257506103c182610b01565b5b9050919050565b60605f80546103d7906121fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610403906121fe565b801561044e5780601f106104255761010080835404028352916020019161044e565b820191905f5260205f20905b81548152906001019060200180831161043157829003601f168201915b5050505050905090565b5f61046282610be2565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f6104a48261062f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b9061229e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610533610c2d565b73ffffffffffffffffffffffffffffffffffffffff16148061056257506105618161055c610c2d565b6109b4565b5b6105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105989061232c565b60405180910390fd5b6105ab8383610c34565b505050565b6105c16105bb610c2d565b82610cea565b610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f7906123ba565b60405180910390fd5b61060b838383610d7e565b505050565b61062a83838360405180602001604052805f815250610848565b505050565b5f8061063a8361106a565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a190612422565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610719906124b0565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b61076f6110a3565b6107785f611121565b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546107b1906121fe565b80601f01602080910402602001604051908101604052809291908181526020018280546107dd906121fe565b80156108285780601f106107ff57610100808354040283529160200191610828565b820191905f5260205f20905b81548152906001019060200180831161080b57829003601f168201915b5050505050905090565b61084461083d610c2d565b83836111e4565b5050565b610859610853610c2d565b83610cea565b610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f906123ba565b60405180910390fd5b6108a48484848461134b565b50505050565b60606108b582610be2565b5f60065f8481526020019081526020015f2080546108d2906121fe565b80601f01602080910402602001604051908101604052809291908181526020018280546108fe906121fe565b80156109495780601f1061092057610100808354040283529160200191610949565b820191905f5260205f20905b81548152906001019060200180831161092c57829003601f168201915b505050505090505f6109596113a7565b90505f81510361096d5781925050506109af565b5f825111156109a1578082604051602001610989929190612508565b604051602081830303815290604052925050506109af565b6109aa846113bd565b925050505b919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610a4a6110a3565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf9061259b565b60405180910390fd5b610ac181611121565b50565b5f610acd6110a3565b610ad76008611422565b5f610ae26008611436565b9050610aee3382611442565b610af88184611655565b80915050919050565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610bcb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610bdb5750610bda826116f7565b5b9050919050565b610beb81611760565b610c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2190612422565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610ca48361062f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f80610cf58361062f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d375750610d3681856109b4565b5b80610d7557508373ffffffffffffffffffffffffffffffffffffffff16610d5d84610458565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d9e8261062f565b73ffffffffffffffffffffffffffffffffffffffff1614610df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610deb90612629565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e59906126b7565b60405180910390fd5b610e6f83838360016117a0565b8273ffffffffffffffffffffffffffffffffffffffff16610e8f8261062f565b73ffffffffffffffffffffffffffffffffffffffff1614610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90612629565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461106583838360016117a6565b505050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6110ab610c2d565b73ffffffffffffffffffffffffffffffffffffffff166110c961077a565b73ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111169061271f565b60405180910390fd5b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124990612787565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161133e9190611c16565b60405180910390a3505050565b611356848484610d7e565b611362848484846117ac565b6113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890612815565b60405180910390fd5b50505050565b606060405180602001604052805f815250905090565b60606113c882610be2565b5f6113d16113a7565b90505f8151116113ef5760405180602001604052805f81525061141a565b806113f98461192e565b60405160200161140a929190612508565b6040516020818303038152906040525b915050919050565b6001815f015f828254019250508190555050565b5f815f01549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a79061287d565b60405180910390fd5b6114b981611760565b156114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f0906128e5565b60405180910390fd5b6115065f838360016117a0565b61150f81611760565b1561154f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611546906128e5565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116515f838360016117a6565b5050565b61165e82611760565b61169d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169490612973565b60405180910390fd5b8060065f8481526020019081526020015f2090816116bb9190612b2e565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516116eb9190611e81565b60405180910390a15050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff166117818361106a565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b5f6117cc8473ffffffffffffffffffffffffffffffffffffffff166119f8565b15611921578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117f5610c2d565b8786866040518563ffffffff1660e01b81526004016118179493929190612c4f565b6020604051808303815f875af192505050801561185257506040513d601f19601f8201168201806040525081019061184f9190612cad565b60015b6118d1573d805f8114611880576040519150601f19603f3d011682016040523d82523d5f602084013e611885565b606091505b505f8151036118c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c090612815565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611926565b600190505b949350505050565b60605f600161193c84611a1a565b0190505f8167ffffffffffffffff81111561195a57611959611f0a565b5b6040519080825280601f01601f19166020018201604052801561198c5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119ed578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119e2576119e1612cd8565b5b0494505f8503611999575b819350505050919050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611a76577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611a6c57611a6b612cd8565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ab3576d04ee2d6d415b85acef81000000008381611aa957611aa8612cd8565b5b0492506020810190505b662386f26fc100008310611ae257662386f26fc100008381611ad857611ad7612cd8565b5b0492506010810190505b6305f5e1008310611b0b576305f5e1008381611b0157611b00612cd8565b5b0492506008810190505b6127108310611b30576127108381611b2657611b25612cd8565b5b0492506004810190505b60648310611b535760648381611b4957611b48612cd8565b5b0492506002810190505b600a8310611b62576001810190505b80915050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bb081611b7c565b8114611bba575f80fd5b50565b5f81359050611bcb81611ba7565b92915050565b5f60208284031215611be657611be5611b74565b5b5f611bf384828501611bbd565b91505092915050565b5f8115159050919050565b611c1081611bfc565b82525050565b5f602082019050611c295f830184611c07565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611c66578082015181840152602081019050611c4b565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611c8b82611c2f565b611c958185611c39565b9350611ca5818560208601611c49565b611cae81611c71565b840191505092915050565b5f6020820190508181035f830152611cd18184611c81565b905092915050565b5f819050919050565b611ceb81611cd9565b8114611cf5575f80fd5b50565b5f81359050611d0681611ce2565b92915050565b5f60208284031215611d2157611d20611b74565b5b5f611d2e84828501611cf8565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611d6082611d37565b9050919050565b611d7081611d56565b82525050565b5f602082019050611d895f830184611d67565b92915050565b611d9881611d56565b8114611da2575f80fd5b50565b5f81359050611db381611d8f565b92915050565b5f8060408385031215611dcf57611dce611b74565b5b5f611ddc85828601611da5565b9250506020611ded85828601611cf8565b9150509250929050565b5f805f60608486031215611e0e57611e0d611b74565b5b5f611e1b86828701611da5565b9350506020611e2c86828701611da5565b9250506040611e3d86828701611cf8565b9150509250925092565b5f60208284031215611e5c57611e5b611b74565b5b5f611e6984828501611da5565b91505092915050565b611e7b81611cd9565b82525050565b5f602082019050611e945f830184611e72565b92915050565b611ea381611bfc565b8114611ead575f80fd5b50565b5f81359050611ebe81611e9a565b92915050565b5f8060408385031215611eda57611ed9611b74565b5b5f611ee785828601611da5565b9250506020611ef885828601611eb0565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611f4082611c71565b810181811067ffffffffffffffff82111715611f5f57611f5e611f0a565b5b80604052505050565b5f611f71611b6b565b9050611f7d8282611f37565b919050565b5f67ffffffffffffffff821115611f9c57611f9b611f0a565b5b611fa582611c71565b9050602081019050919050565b828183375f83830152505050565b5f611fd2611fcd84611f82565b611f68565b905082815260208101848484011115611fee57611fed611f06565b5b611ff9848285611fb2565b509392505050565b5f82601f83011261201557612014611f02565b5b8135612025848260208601611fc0565b91505092915050565b5f805f806080858703121561204657612045611b74565b5b5f61205387828801611da5565b945050602061206487828801611da5565b935050604061207587828801611cf8565b925050606085013567ffffffffffffffff81111561209657612095611b78565b5b6120a287828801612001565b91505092959194509250565b5f80604083850312156120c4576120c3611b74565b5b5f6120d185828601611da5565b92505060206120e285828601611da5565b9150509250929050565b5f67ffffffffffffffff82111561210657612105611f0a565b5b61210f82611c71565b9050602081019050919050565b5f61212e612129846120ec565b611f68565b90508281526020810184848401111561214a57612149611f06565b5b612155848285611fb2565b509392505050565b5f82601f83011261217157612170611f02565b5b813561218184826020860161211c565b91505092915050565b5f6020828403121561219f5761219e611b74565b5b5f82013567ffffffffffffffff8111156121bc576121bb611b78565b5b6121c88482850161215d565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061221557607f821691505b602082108103612228576122276121d1565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f612288602183611c39565b91506122938261222e565b604082019050919050565b5f6020820190508181035f8301526122b58161227c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f612316603d83611c39565b9150612321826122bc565b604082019050919050565b5f6020820190508181035f8301526123438161230a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f6123a4602d83611c39565b91506123af8261234a565b604082019050919050565b5f6020820190508181035f8301526123d181612398565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f61240c601883611c39565b9150612417826123d8565b602082019050919050565b5f6020820190508181035f83015261243981612400565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f61249a602983611c39565b91506124a582612440565b604082019050919050565b5f6020820190508181035f8301526124c78161248e565b9050919050565b5f81905092915050565b5f6124e282611c2f565b6124ec81856124ce565b93506124fc818560208601611c49565b80840191505092915050565b5f61251382856124d8565b915061251f82846124d8565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612585602683611c39565b91506125908261252b565b604082019050919050565b5f6020820190508181035f8301526125b281612579565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f612613602583611c39565b915061261e826125b9565b604082019050919050565b5f6020820190508181035f83015261264081612607565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6126a1602483611c39565b91506126ac82612647565b604082019050919050565b5f6020820190508181035f8301526126ce81612695565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612709602083611c39565b9150612714826126d5565b602082019050919050565b5f6020820190508181035f830152612736816126fd565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f612771601983611c39565b915061277c8261273d565b602082019050919050565b5f6020820190508181035f83015261279e81612765565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f6127ff603283611c39565b915061280a826127a5565b604082019050919050565b5f6020820190508181035f83015261282c816127f3565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f612867602083611c39565b915061287282612833565b602082019050919050565b5f6020820190508181035f8301526128948161285b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f6128cf601c83611c39565b91506128da8261289b565b602082019050919050565b5f6020820190508181035f8301526128fc816128c3565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e5f8201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b5f61295d602e83611c39565b915061296882612903565b604082019050919050565b5f6020820190508181035f83015261298a81612951565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026129ed7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129b2565b6129f786836129b2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612a32612a2d612a2884611cd9565b612a0f565b611cd9565b9050919050565b5f819050919050565b612a4b83612a18565b612a5f612a5782612a39565b8484546129be565b825550505050565b5f90565b612a73612a67565b612a7e818484612a42565b505050565b5b81811015612aa157612a965f82612a6b565b600181019050612a84565b5050565b601f821115612ae657612ab781612991565b612ac0846129a3565b81016020851015612acf578190505b612ae3612adb856129a3565b830182612a83565b50505b505050565b5f82821c905092915050565b5f612b065f1984600802612aeb565b1980831691505092915050565b5f612b1e8383612af7565b9150826002028217905092915050565b612b3782611c2f565b67ffffffffffffffff811115612b5057612b4f611f0a565b5b612b5a82546121fe565b612b65828285612aa5565b5f60209050601f831160018114612b96575f8415612b84578287015190505b612b8e8582612b13565b865550612bf5565b601f198416612ba486612991565b5f5b82811015612bcb57848901518255600182019150602085019450602081019050612ba6565b86831015612be85784890151612be4601f891682612af7565b8355505b6001600288020188555050505b505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f612c2182612bfd565b612c2b8185612c07565b9350612c3b818560208601611c49565b612c4481611c71565b840191505092915050565b5f608082019050612c625f830187611d67565b612c6f6020830186611d67565b612c7c6040830185611e72565b8181036060830152612c8e8184612c17565b905095945050505050565b5f81519050612ca781611ba7565b92915050565b5f60208284031215612cc257612cc1611b74565b5b5f612ccf84828501612c99565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220782d0df9004948c685fcebf45dafe52a19584f868ba02dd9d53df0a65e7f1f2364736f6c63430008140033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        // TODO: magic number(?) refactor needed
        _addresses.put("5", "0xEa38B410cdAb3e8c5cC0Bb3B9037499B82485796");
    }

    @Deprecated
    protected MyNFTs(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MyNFTs(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MyNFTs(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MyNFTs(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String tokenURI) {
        final Function function = new Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MyNFTs load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyNFTs(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MyNFTs load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyNFTs(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MyNFTs load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MyNFTs(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MyNFTs load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MyNFTs(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MyNFTs> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyNFTs.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MyNFTs> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyNFTs.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyNFTs> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyNFTs.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MyNFTs> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyNFTs.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
